/*
 * Tinkers Construct
 * Master build file
 * 
 * Authors: boni, Sunstrike, ProgWML6
 * Help from AbrarSyed
 */

buildscript {
    repositories {
        mavenLocal()
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath "io.freefair.gradle:lombok-plugin:4.1.6"
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: "io.freefair.lombok"

import net.minecraftforge.gradle.common.task.SignJar

repositories {
    mavenLocal()
    maven { // Forge
        name 'ForgeFS'
        url 'https://files.minecraftforge.net/maven'
    }
    maven { // Mantle and JEI
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven { // unofficial backup maven in case official mavens go down
        name "ModMaven"
        url "https://modmaven.k-4u.nl"
    }
}

group = 'slimeknights.tconstruct'

// sets version to the slimeKnights version format
task buildInfo {
    try {
        def cmd = "git rev-parse --short HEAD"
        def proc = cmd.execute()
        proc.waitFor()
        if (proc.exitValue() == 0) {
            ext.revision = proc.text.trim()
        } else {
            ext.revision = "GITBORK"
        }
    } catch (all) {
        ext.revision = "gitgud"
    }

    if (System.getenv().BUILD_NUMBER != null) {
        ext.buildNum = "${System.getenv().BUILD_NUMBER}"
    } else {
        ext.buildNum = "DEV.${project.buildInfo.revision}"
    }
}
ext.artifact_version = 'NFG'
if (System.getenv().ARTIFACT_VERSION == null) {
    artifact_version = "${mod_version}.${project.buildInfo.buildNum}"
}
if (System.getenv().ARTIFACT_VERSION != null) {
    artifact_version = "${system.getenv().ARTIFACT_VERSION}"
}

version = "${minecraft_version}-${artifact_version}"

sourceSets {
    main {
        resources {
            srcDirs = [
                "$rootDir/src/main/resources",
                "$rootDir/src/generated/resources"
            ]
        }
    }
}

minecraft {
    mappings channel: 'snapshot', version: mappings_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP,CORE'
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP,CORE' enable if you want spam from the scanner.

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                tconstruct {
                    source sourceSets.main
                }
            }

            //The below if statements are to add args to your gradle.properties file in user home
            // (DO NOT add them directly to the gradle.properties file for this project)
            // Setting the below properties allows use of your normal Minecraft account in the
            // dev environment including having your skin load. Each property also has a comment
            // explaining what information to set the value to/format it expects
            // One thing to note is because of the caching that goes on, after changing these
            // variables, you need to refresh the project and rerun genIntellijRuns/genEclipseRuns
            if (project.hasProperty('mc_uuid')) {
                //Your uuid without any dashes in the middle
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                //Your username/display name, this is the name that shows up in chat
                // Note: This is not your email, even if you have a Mojang account
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                //Your access token, you can find it in your '.minecraft/launcher_profiles.json' file
                args '--accessToken', project.getProperty('mc_accessToken')
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP,CORE'
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP,CORE' enable if you want spam from the scanner.

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                tconstruct {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP,CORE'
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP,CORE' enable if you want spam from the scanner.

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'tconstruct', '--all', '--output', file('src/generated/resources/')

            mods {
                tconstruct {
                    source sourceSets.main
                }
            }
        }
    }
}

configurations {
    deployerJars
}

dependencies {
    minecraft 'net.minecraftforge:forge:' + minecraft_version + '-' + forge_version

    compile fg.deobf("slimeknights.mantle:Mantle:${minecraft_version}-${mantle_version}")

    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-1.16.2:${jei_version}:api")
    // at runtime, use the full JEI jar
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.2:${jei_version}")

    compile fg.deobf("mcjty.theoneprobe:TheOneProbe-${minecraft_base_version}:${minecraft_base_version}-${probe_version}")

    deployerJars 'org.apache.maven.wagon:wagon-ssh:2.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
    testImplementation 'org.mockito:mockito-core:3.1.0'
    testImplementation 'org.assertj:assertj-core:3.14.0'

}

test {
    useJUnitPlatform()
}

processResources {
    inputs.property "version", artifact_version
    inputs.property "MCversion", minecraft_version

    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand 'version': artifact_version,
            'minecraft_version_min': minecraft_version_min, 'minecraft_version_max': minecraft_version_max,
            'forge_version_min': forge_version_min, 'forge_version_max': forge_version_max,
            'javafml_min': javafml_min, 'javafml_max': javafml_max,
            'mantle_version': mantle_version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}


jar {
    manifest {
        attributes([
                "Specification-Title"     : "Tinkers Construct",
                "Specification-Vendor"    : "Slime Knights",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Slime Knights",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}

// verify the properties exist.. or initialize.
if (!project.hasProperty("keystore_location")) // keystore location
    ext.keystore_location = "."

if (!project.hasProperty("keystore_user_alias")) // keystore user alias
    ext.keystore_user_alias = ""
if (!project.hasProperty("sftp_username"))
    ext.sftp_username = ""
if (!project.hasProperty("sftp_key"))
    ext.sftp_key = ""
if (!project.hasProperty("keystore_user_password")) // keystore user pass
    ext.keystore_user_password = ""
if (System.getenv().KSK_PW != null)
    ext.keystore_user_password = System.getenv().KSK_PW


task("uploadJars", dependsOn: "build") {

    description = "uploads JARs"

    if (project.hasProperty("local_maven") || project.hasProperty("sftp_maven")) {
        apply plugin: 'maven'
        uploadArchives {
            repositories {
                if (project.hasProperty("local_maven")) {
                    mavenDeployer {
                        repository(url: "file://${local_maven}")
                    }
                }
                if (project.hasProperty("sftp_maven")) {
                    repositories.mavenDeployer {
                        configuration = configurations.deployerJars
                        repository(url: "sftp://${sftp_maven}") {
                            authentication(userName: "${sftp_username}", privateKey: "${sftp_key}")
                        }
                    }
                }
            }
        }
    }
}

task signUniversal(type: SignJar, dependsOn: 'jar') {
    onlyIf {
        project.hasProperty('jarsigner')
    }

    def jarsigner = [:]

    if (project.hasProperty('jarsigner'))
        jarsigner = project.jarsigner

    alias = 'tcon'
    storePass = jarsigner.storepass
    keyPass = jarsigner.keypass
    keyStore = jarsigner.keystore
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}
uploadArchives.dependsOn signUniversal
build.dependsOn signUniversal

publishing {
    publications {
        mavenJava(MavenPublication) {
            // todo: remove deobf and sources jar in 1.13
            artifact jar
            artifact sourcesJar
        }
    }

    repositories {
        if (project.hasProperty('DEPLOY_DIR')) {
            maven { url DEPLOY_DIR }
        }
    }
}
